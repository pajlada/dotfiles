pgodeps() {
    go list -f '{{range .Imports}}
{{.}}
{{end}}' $1 | sort | uniq
}

grepcppincludes() {
    grep -rIh '#include ' $@ | sort -u
}

qreset() {
    tput reset
    tmux clear-history
}

nvm-init() {
    source /usr/share/nvm/init-nvm.sh
}

tag-release() {
    local _version="$1"
    if [ -z "$_version" ]; then
        echo "Missing version. usage: $0 version (e.g. $0 v0.7.3)"
        return 1
    fi
    if [ "$(echo $_version | head -c 1)" != "v" ]; then
        _version="v$_version"
    fi
    echo "Making an annotated git tag '$_version'"
    git tag $_version -am "$_version"
}

branch-release() {
    local _version="$1"
    if [ -z "$_version" ]; then
        echo "Missing version. usage: $0 version (e.g. $0 v0.7.3)"
        return 1
    fi
    if [ "$(echo $_version | head -c 1)" = "v" ]; then
        _version="${_version:1}"
    fi
    export _branch_name="release/$_version"
    echo "Making an git release branch '$_version'"
    git checkout -b "$_branch_name"
}

full-release() {
    local _version="$1"
    if [ -z "$_version" ]; then
        echo "Missing version. usage: $0 version (e.g. $0 v0.7.3)"
        return 1
    fi
    tag-release "$_version"
    git push --follow-tags
    branch-release "$_version"
    git push -u origin "$_branch_name"
}

full-release-npm() {
    local _version="$1"
    if [ -z "$_version" ]; then
        echo "Missing version. usage: $0 version (e.g. $0 v0.7.3)"
        return 1
    fi
    npm version "$_version"
    git push --follow-tags
    branch-release "$_version"
    git push -u origin "$_branch_name"
}

adddate() {
    while IFS= read -r line; do
        printf '%s %s\n' "$(date)" "$line"
    done
}

update-dotfiles() {
    ( cd "$HOME/git/dotfiles" && git pull )
}

download-bttv-emote() {
    _url="$1"
    if [ -z "$_url" ]; then
        >&2 echo "No URL passed to the function. Usage: $0 url (e.g. $0 https://cdn.betterttv.net/emote/5e5cef4cddc7a054d7f0ff22/3x)"
        exit 1
    fi
    if [ "$(echo $_url | tail -c 4)" = "/3x" ] || [ "$(echo $_url | tail -c 4)" = "/2x" ] || [ "$(echo $_url | tail -c 4)" = "/1x" ]; then
        _url="$(echo $_url | head -c -4)"
    fi
    _emote_id=$(echo "$_url" | rev | cut -d / -f 1 | rev)
    _emote_json=$(curl -s "https://api.betterttv.net/3/emotes/$_emote_id")
    _emote_code=$(echo "$_emote_json" | jq -r '.code')
    mkdir -p "$_emote_code"
    echo "Downloading all sizes of the emote $_emote_code (id '$_emote_id')"
    wget --quiet "$_url/1x" --output-document="$_emote_code"/"$_emote_code"-1x.png
    wget --quiet "$_url/2x" --output-document="$_emote_code"/"$_emote_code"-2x.png
    wget --quiet "$_url/3x" --output-document="$_emote_code"/"$_emote_code"-3x.png
}

scrot-qr() {
    _path=$(mktemp -u /tmp/scrot-qr-XXXXXX)
    scrot "$_path" -o -s -e "zbarimg $_path" && rm "$_path"
}

scrot-clipboard() {
    if [ -n "$WAYLAND_DISPLAY" ]; then
        # wayland screenshot
        DELAY="0"
        pos="$(slurp)"
        while [[ $# -gt 0 ]]; do
          case $1 in
            -d|--delay)
              DELAY="$2"
              shift # past argument
              shift # past value
              ;;
            -*|--*)
              echo "Unknown option $1"
              exit 1
              ;;
            *)
              echo "Unknown positional arg $1"
              exit 1
              ;;
          esac
        done

        if [[ "$DELAY" -gt "0" ]]; then
            echo "delay "$DELAY" seconds"
            sleep "$DELAY"
        fi

        grim -g "$pos" - | wl-copy

        echo "DELAY: $DELAY"
    else
        _path=$(mktemp -u /tmp/scrot-clipboard-XXXXXX.png)

        >&2 echo "Select portion to screenshot"

        scrot -s $@ "$_path" || return

        xclip -selection clipboard -target image/png "$_path" || return

        >&2 echo "Saved to clipboard"
    fi
}

screen-record-clipboard() {
    _path_avi=$(mktemp -u /tmp/screen-record-XXXXXX.avi)
    _path_gif=$(mktemp -u /tmp/screen-record-XXXXXX.gif)

    >&2 echo "Select portion to record (30fps)"

    ffcast -s % ffmpeg -y -f x11grab -show_region 1 -framerate 30 \
        -video_size %s -i %D+%c -codec:v huffyuv                  \
        -vf crop="iw-mod(iw\\,2):ih-mod(ih\\,2)" "$_path_avi"

    convert -set delay 5 -layers Optimize "$_path_avi" "$_path_gif" || return

    xclip -selection clipboard -target image/gif "$_path_gif" || return

    >&2 echo "Saved to clipboard"
}

add-boost-submodule() {
    for _library_name in $@; do
        [ -d "boost-$_library_name" ] && continue
        git submodule add https://github.com/boostorg/$_library_name boost-$_library_name
    done
}

watch-and-run() {
    _dir_or_file_to_watch="$1"
    _command="$2"
    _watch_path=$(mktemp -u /tmp/watch-output-XXXXXX)
    _watch_path=/tmp/watch-xd
    rm -f "$_watch_path"
    echo "Watch path: $_watch_path"
    inotifywait --format '%e' -mrq "$_dir_or_file_to_watch" > "$_watch_path" &
    _in_pid=$$

    ctrl_c() {
        echo "killing $_in_pid"
        kill $_in_pid
    }

    # trap ctrl_c SIGINT SIGTERM
    # trap ctrl_c INT TERM
    trap ctrl_c EXIT

    tail -f "$_watch_path" | while read _events; do
        for _event in $(echo $_events | tr "," "\n"); do
            echo "single event: $_event"
        done
        echo "all events $_events"
    done
}

ssh() {
    if [ -n "$TMUX" ]; then
        tmux rename-window "$(echo $* | cut -d . -f 1)"
        command ssh "$@"
        tmux set-window-option automatic-rename "on" 1>/dev/null
    else
        command ssh "$@"
    fi
}

take() {
    _dir="$1"
    mkdir -p "$_dir" && cd "$_dir"
}

gotestcover() {
    go test -coverprofile=.coverage.out $@ && go tool cover -html=.coverage.out
}

pico-install() {
    sudo cp "$1" /mnt/rpi/
}

pico-mount() {
    _rp2_dev="$(fdisk -l | grep --before=1 'RP2')"
    if [ -z "$_rp2_dev" ]; then
        >&2 echo "$0: No RP2 disk mounted"
        return
    fi
    _dev="$(echo "$_rp2_dev" | grep 'Disk /dev/' | cut -d':' -f1 | cut -d' ' -f2)"
    _drive="${_dev}1"
    sudo mount "$_drive" /mnt/rpi
    echo "$0: Mounted $_drive"
}

cargo-update-pr() {
    _branch_name="chore/cargo-update-$(date +%s)"
    git checkout -b "$_branch_name"
    cargo update
    git add Cargo.lock
    git commit -m "Update cargo packages

Update workspace & non-workspace packages not already handled by dependabot"
    git push -u origin "$_branch_name"
    xdg-open "$(gh repo view --json url | jq -r '.url')/pull/new/$_branch_name"
}

copy-trycmd-tests() {
    source_test_name="$1"
    target_test_name="$2"

    [ -n "$source_test_name" ] || {>&2 echo "Missing source test name"; return 1}
    [ -n "$target_test_name" ] || {>&2 echo "Missing target test name"; return 1}

    >&2 echo "Copying over tests for $source_test_name to $target_test_name"

    [ -f "$source_test_name.toml" ] || {>&2 echo "No test named $source_test_name.toml found"; return 1}
    [ ! -f "$target_test_name.toml" ] || {>&2 echo "Target test $target_test_name.toml already exists"; return 1}

    # Required
    cp "$source_test_name.toml" "$target_test_name.toml" || return 1

    # Optional
    >&/dev/null cp "$source_test_name.stderr" "$target_test_name.stderr" || true
    >&/dev/null cp "$source_test_name.stdout" "$target_test_name.stdout" || true
    >&/dev/null cp -r "$source_test_name.in" "$target_test_name.in" || true
}

urlencode() {
    _url="$1"
    python3 -c "import urllib.parse;print(urllib.parse.quote('$_url', safe=''))"
}

gh-get-latest-numbers() {
    { gh issue list --state all | head; gh pr list --state all | head; gh api graphql -F owner='{owner}' -F name='{repo}' -f query=' query ($name: String!, $owner: String!) { repository(owner: $owner, name: $name) { discussions(first: 5) { nodes { number title } } } }' | jq -r '.data.repository.discussions.nodes[] | ((.number | tostring) + "    " + .title)'} | sort -r | head
}

# macOS-specific commands
if [[ "$OSTYPE" == 'darwin'* ]]; then
    # Make & install universal dylib of the given library
    # Commands necessary for C2 on my mac mini to work:
    #
    # c2-make-universal-dylib lib/libboost_random-mt.dylib
    # If this doesn't work, run brew link --overwrite boost
    #
    # c2-make-universal-dylib opt/openssl@1.1/lib/libcrypto.dylib
    # c2-make-universal-dylib opt/openssl@1.1/lib/libssl.dylib
    # If either of these commands don't work, run brew reinstall openssl@1.1
    c2-make-universal-dylib() {
        # Prefix for where to find the ARM64 library
        local _arm64_homebrew="/opt/homebrew"

        # Prefix for where to find the ARM64 library
        local _x86_64_homebrew="/opt/homebrew-x86_64"

        # Prefix we use to override the library (should be the base systems directory)
        local _override_homebrew="${_arm64_homebrew}"

        # Directory where we place the finished universal library
        local _universal_lib="/opt/universal-lib"

        local _input_lib="$1"
        if [ -z "${_input_lib}" ]; then
            echo "usage: $0 [lib-path-relative-to-homebrew] (e.g. $0 lib/libboost_random-mt.dylib)"
            return
        fi

        if [ ! -d "${_arm64_homebrew}" ]; then
            echo "error: The ARM64 homebrew directory (${_arm64_homebrew}) does not exist"
            return
        fi
        if [ ! -d "${_x86_64_homebrew}" ]; then
            echo "error: The x86_64 homebrew directory (${_x86_64_homebrew}) does not exist"
            return
        fi
        if [ ! -d "${_universal_lib}" ]; then
            echo "error: The universal lib directory (${_universal_lib}) does not exist"
            return
        fi

        if [ ! -w "${_universal_lib}" ]; then
            echo "error: The current user does not have write permission in the universal lib directory (${_universal_lib})"
            return
        fi

        local _input_lib_filename="$(basename "${_input_lib}")"

        local _arm64_lib="${_arm64_homebrew}/${_input_lib}"
        local _x86_64_lib="${_x86_64_homebrew}/${_input_lib}"
        local _override_lib="${_override_homebrew}/${_input_lib}"

        local _universal_lib="${_universal_lib}/${_input_lib_filename}"

        if [ -f "${_universal_lib}" ]; then
            echo "warning: The final output path (${_universal_lib}) already exists, you might run into errors"
            echo "Some of these errors can be solved by re-linking the original libraries (e.g. brew link --overwrite boost), or re-installing them (e.g. brew reinstall openssl@1.1)"
            echo ""
        fi

        if [ ! -f "${_arm64_lib}" ]; then
            echo "error: The ARM64 library cannot be found at '${_arm64_lib}' (combined prefix '${_arm64_homebrew}' with '${_input_lib})"
            return
        fi

        if [ ! -f "${_x86_64_lib}" ]; then
            echo "error: The x86_64 library cannot be found at '${_x86_64_lib}' (combined prefix '${_arm64_homebrew}' with '${_input_lib})"
            return
        fi

        # Create the combined library
        if ! lipo "${_arm64_lib}" "${_x86_64_lib}" -create -output "${_universal_lib}"; then
            echo "error: Something went wrong creating the combined library"
            echo "Some errors can be solved by re-linking the original libraries (e.g. brew link --overwrite boost)"
            return
        fi

        echo "Created the combined library at '${_universal_lib}"

        # Override
        rm -v "${_override_lib}"
        ln -v -s "${_universal_lib}" "${_override_lib}"
    }
fi
